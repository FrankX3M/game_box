import asyncio
import random
import logging
from dotenv import load_dotenv  # Add this import
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from db import init_db, add_win, get_leaderboard, get_balance, deduct_bet, get_transaction_history


load_dotenv()  # Add this line
# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Bot token and configuration
TOKEN = os.getenv('TELEGRAM_TOKEN')
if not TOKEN:
    logger.error("TELEGRAM_TOKEN not found in environment variables!")
print(TOKEN)
print(type(TOKEN))

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö (—Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å Docker)
DATA_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), "data")
os.makedirs(DATA_DIR, exist_ok=True)

# Game economics - —É–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –¥—Ä–∞–π–≤–∞
MOVE_COST = 15      # –£–≤–µ–ª–∏—á–µ–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ö–æ–¥–∞ (–±—ã–ª–æ 10)
WIN_AMOUNT = 80     # –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω –≤—ã–∏–≥—Ä—ã—à (–±—ã–ª–æ 70)
GRID_SIZE = 4       # –£–≤–µ–ª–∏—á–µ–Ω —Ä–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏ –¥–æ 4x4 (–±—ã–ª–æ 3x3)
GAME_TIMEOUT = 180  # –£–º–µ–Ω—å—à–µ–Ω–æ –≤—Ä–µ–º—è –Ω–∞ –∏–≥—Ä—É (–±—ã–ª–æ 300 —Å–µ–∫)

# Initialize bot and dispatcher
bot = Bot(token=TOKEN)
dp = Dispatcher()

# Game state storage
games = {}

def generate_keyboard(chat_id, game):
    """Generate the game keyboard with current state."""
    buttons = []
    for i in range(GRID_SIZE):
        row = []
        for j in range(GRID_SIZE):
            cell_id = f"{i}_{j}"
            if cell_id in game["opened"]:
                # Opened cell - show X or target
                text = "‚ùå" if cell_id != game["target"] else "üçÜ"
                row.append(InlineKeyboardButton(text=text, callback_data="noop"))
            else:
                # Closed cell - show box
                row.append(InlineKeyboardButton(
                    text="üì¶", 
                    callback_data=f"open:{chat_id}:{cell_id}"
                ))
        buttons.append(row)
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def start_new_game(chat_id):
    """Initialize a new game for the given chat_id."""
    # Random target position (row_col format)
    target = f"{random.randint(0, GRID_SIZE-1)}_{random.randint(0, GRID_SIZE-1)}"
    games[chat_id] = {
        "target": target,         # The position of the winning cell
        "opened": set(),          # Set of already opened cells
        "active": True,           # Game status flag
        "moves": 0,               # Count moves made
        "total_spent": 0          # Total coins spent
    }
    logger.info(f"New game started for chat {chat_id}. Target: {target}")

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    """Handle /start command."""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/play - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
        "/balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/history - –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–±–µ–¥\n\n"
        "üìã –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n"
        f"- –ó–∞ –∫–∞–∂–¥—ã–π —Ö–æ–¥ —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è {MOVE_COST} –º–æ–Ω–µ—Ç\n"
        f"- –ï—Å–ª–∏ –Ω–∞–π–¥—ë—à—å —Ö—É–π –≤ –∫–æ—Ä–æ–±–∫–µ - –ø–æ–ª—É—á–∏—à—å {WIN_AMOUNT} –º–æ–Ω–µ—Ç\n"
        f"- –ò–≥—Ä–∞ –∏–¥–µ—Ç –Ω–∞ —Å–µ—Ç–∫–µ {GRID_SIZE}x{GRID_SIZE}, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –µ—ë —Å–ª–æ–∂–Ω–µ–µ\n"
        f"- –£ —Ç–µ–±—è {GAME_TIMEOUT//60} –º–∏–Ω—É—Ç –Ω–∞ –∏–≥—Ä—É, –ø–æ—Ç–æ–º –æ–Ω–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è\n"
        "- –ë—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω! –û—Ç–∫—Ä—ã–≤–∞—è –±–æ–ª—å—à–µ —è—á–µ–µ–∫, —Ç—ã —Ä–∏—Å–∫—É–µ—à—å –ø–æ—Ç–µ—Ä—è—Ç—å –±–æ–ª—å—à–µ –º–æ–Ω–µ—Ç"
    )

@dp.message(Command("play"))
async def play_handler(message: types.Message):
    """Handle /play command - start a new game."""
    try:
        chat_id = message.chat.id
        user_id = message.from_user.id
        username = message.from_user.full_name
        
        logger.info(f"Play command from user {user_id} ({username}) in chat {chat_id}")

        # Check user balance - make sure they have at least enough for one move
        balance = get_balance(user_id)
        if balance < MOVE_COST:
            await message.answer(f"–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã {MOVE_COST}, –∞ —É —Ç–µ–±—è {balance}.")
            return
        
        # Start new game
        start_new_game(chat_id)
        
        # Send game message with keyboard
        await message.answer(
            f"üé≤ –ù–∞–π–¥–∏ —Ö—É–π –≤ –∫–æ—Ä–æ–±–∫–µ!\n–°—Ç–æ–∏–º–æ—Å—Ç—å —Ö–æ–¥–∞: {MOVE_COST} –º–æ–Ω–µ—Ç.\n–í—ã–∏–≥—Ä—ã—à: {WIN_AMOUNT} –º–æ–Ω–µ—Ç.\n\nüí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç",
            reply_markup=generate_keyboard(chat_id, games[chat_id])
        )
        
        # Set game timeout
        asyncio.create_task(game_timeout(chat_id))
    except Exception as e:
        logger.error(f"Error in play handler: {str(e)}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def game_timeout(chat_id, timeout=GAME_TIMEOUT):
    """Clean up game after timeout."""
    await asyncio.sleep(timeout)
    if chat_id in games and games[chat_id]["active"]:
        game_info = games.pop(chat_id)
        logger.info(f"Game for chat {chat_id} timed out and was removed. Moves: {game_info['moves']}, Spent: {game_info['total_spent']}")
        try:
            await bot.send_message(
                chat_id=chat_id, 
                text=f"‚è∞ –í—Ä–µ–º—è –∏–≥—Ä—ã –∏—Å—Ç–µ–∫–ª–æ! –¢—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª {game_info['total_spent']} –º–æ–Ω–µ—Ç –∑–∞ {game_info['moves']} —Ö–æ–¥–æ–≤, –Ω–æ —Ç–∞–∫ –∏ –Ω–µ –Ω–∞—à–µ–ª –ø—Ä–∏–∑."
            )
        except:
            pass

@dp.callback_query(F.data.startswith("open"))
async def open_cell(callback: types.CallbackQuery):
    """Handle cell opening callback."""
    try:
        # Parse callback data
        parts = callback.data.split(":")
        if len(parts) != 3:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
            
        _, chat_id_str, cell_id = parts
        try:
            chat_id = int(chat_id_str)
        except ValueError:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞")
            return
        
        user_id = callback.from_user.id
        username = callback.from_user.full_name
            
        # Get game state
        game = games.get(chat_id)
        if not game:
            await callback.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        if not game["active"]:
            await callback.answer("–ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return

        if cell_id in game["opened"]:
            await callback.answer("–≠—Ç–∞ —è—á–µ–π–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞")
            return
            
        # Check if user has enough balance for this move
        balance = get_balance(user_id)
        if balance < MOVE_COST:
            await callback.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –£ —Ç–µ–±—è {balance}, –Ω—É–∂–Ω–æ {MOVE_COST}.")
            return
            
        # Deduct cost for this move
        old_balance = balance
        new_balance = deduct_bet(user_id, username, MOVE_COST)
        
        # Update game stats
        game["moves"] += 1
        game["total_spent"] += MOVE_COST
        
        # Open the cell
        game["opened"].add(cell_id)
        logger.info(f"Cell {cell_id} opened in chat {chat_id} at cost of {MOVE_COST} coins")

        # Check if it's a winning cell
        if cell_id == game["target"]:
            # Player won
            game["active"] = False
            
            # Add win amount
            old_balance = new_balance  # Balance after move cost deduction
            add_win(user_id, username, WIN_AMOUNT)
            new_balance = get_balance(user_id)
            
            # Create winning message
            total_spent = game["total_spent"]
            profit = WIN_AMOUNT - total_spent
            profit_text = f"+{profit}" if profit > 0 else f"{profit}"
            
            win_msg = (
                f"üí• *{username}* –Ω–∞—à—ë–ª —Ö—É–π –≤ –∫–æ—Ä–æ–±–∫–µ –∏ –≤—ã–∏–≥—Ä–∞–ª {WIN_AMOUNT} –º–æ–Ω–µ—Ç!\n"
                f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_spent} –º–æ–Ω–µ—Ç –∑–∞ {game['moves']} —Ö–æ–¥–æ–≤\n"
                f"–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {profit_text} –º–æ–Ω–µ—Ç\n\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {old_balance} ‚Üí {new_balance} –º–æ–Ω–µ—Ç (+{WIN_AMOUNT})"
            )
            
            logger.info(f"User {user_id} won {WIN_AMOUNT} coins. Moves: {game['moves']}, Spent: {total_spent}, Profit: {profit}")
            
            # Show the winning in the current keyboard
            await callback.message.edit_text(
                f"üé≤ –ù–∞–π–¥–∏ —Ö—É–π –≤ –∫–æ—Ä–æ–±–∫–µ!\n–°—Ç–æ–∏–º–æ—Å—Ç—å —Ö–æ–¥–∞: {MOVE_COST} –º–æ–Ω–µ—Ç.\n–í—ã–∏–≥—Ä—ã—à: {WIN_AMOUNT} –º–æ–Ω–µ—Ç.\n\nüí∞ –ë–∞–ª–∞–Ω—Å: {old_balance} ‚Üí {new_balance} –º–æ–Ω–µ—Ç",
                reply_markup=generate_keyboard(chat_id, game)
            )
            
            # Send winning message
            await callback.message.answer(win_msg, parse_mode="Markdown")
            
            # Start a new game automatically if enough coins
            if new_balance >= MOVE_COST:
                # Start new game
                start_new_game(chat_id)
                
                # Send new game message
                await callback.message.answer(
                    f"üé≤ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É!\n–°—Ç–æ–∏–º–æ—Å—Ç—å —Ö–æ–¥–∞: {MOVE_COST} –º–æ–Ω–µ—Ç.\n–í—ã–∏–≥—Ä—ã—à: {WIN_AMOUNT} –º–æ–Ω–µ—Ç.\n\nüí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} –º–æ–Ω–µ—Ç",
                    reply_markup=generate_keyboard(chat_id, games[chat_id])
                )
                
                # Set timeout
                asyncio.create_task(game_timeout(chat_id))
            else:
                await callback.message.answer(
                    f"–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã! –ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã {MOVE_COST}, –∞ —É —Ç–µ–±—è {new_balance}."
                )
        else:
            # Player missed - update message showing balance change and opened cell
            bad_luck_msgs = [
                "–ú–∏–º–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –∏—Å–∫–∞—Ç—å.",
                "–ù–µ —É–≥–∞–¥–∞–ª! –ò—â–∏ –¥–∞–ª—å—à–µ.",
                "–ü—É—Å—Ç–æ! –ú–æ–∂–µ—Ç –≤ –¥—Ä—É–≥–æ–π –∫–æ—Ä–æ–±–∫–µ?",
                "–ù–∏—á–µ–≥–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –ø–æ–∏—Å–∫.",
                "–ù–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ."
            ]
            
            await callback.answer(f"{random.choice(bad_luck_msgs)} –°–ø–∏—Å–∞–Ω–æ {MOVE_COST} –º–æ–Ω–µ—Ç.")
            
            # Calculate potential profit/loss
            potential_profit = WIN_AMOUNT - game["total_spent"]
            profit_text = f"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: +{potential_profit}" if potential_profit > 0 else f"–¢–µ–∫—É—â–∏–π —É–±—ã—Ç–æ–∫: {potential_profit}"
            
            # Update message with new balance info and moves count
            game_info = (
                f"üé≤ –ù–∞–π–¥–∏ —Ö—É–π –≤ –∫–æ—Ä–æ–±–∫–µ!\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Ö–æ–¥–∞: {MOVE_COST} –º–æ–Ω–µ—Ç.\n"
                f"–í—ã–∏–≥—Ä—ã—à: {WIN_AMOUNT} –º–æ–Ω–µ—Ç.\n"
                f"–•–æ–¥–æ–≤ —Å–¥–µ–ª–∞–Ω–æ: {game['moves']}\n"
                f"{profit_text}\n\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {old_balance} ‚Üí {new_balance} –º–æ–Ω–µ—Ç (-{MOVE_COST})"
            )
            
            # Calculate remaining unopened cells
            total_cells = GRID_SIZE * GRID_SIZE
            remaining = total_cells - len(game["opened"])
            
            # If too many cells opened (>75%), add hint about remaining cells
            if remaining <= total_cells * 0.25:
                game_info += f"\n\n‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ {remaining} —è—á–µ–µ–∫!"
            
            await callback.message.edit_text(
                game_info,
                reply_markup=generate_keyboard(chat_id, game)
            )
    except Exception as e:
        logger.error(f"Error in open_cell handler: {str(e)}")
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command("stats"))
async def stats(message: types.Message):
    """Handle /stats command."""
    leaderboard = get_leaderboard()
    if not leaderboard:
        await message.answer("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã–∏–≥—Ä—ã–≤–∞–ª üò∂")
        return

    text = "üèÜ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–±–µ–¥:*\n"
    for name, points in leaderboard:
        text += f"{name}: {points}\n"
    await message.answer(text, parse_mode="Markdown")

@dp.message(Command("balance"))
async def balance(message: types.Message):
    """Handle /balance command."""
    bal = get_balance(message.from_user.id)
    await message.answer(f"üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {bal} –º–æ–Ω–µ—Ç.")

@dp.message(Command("history"))
async def history(message: types.Message):
    """Handle /history command - show transaction history."""
    user_id = message.from_user.id
    transactions = get_transaction_history(user_id, limit=10)
    
    if not transactions:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
        return
    
    text = "üìä *–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:*\n\n"
    for amount, type_tx, timestamp in transactions:
        symbol = "‚ûï" if amount > 0 else "‚ûñ"
        abs_amount = abs(amount)
        type_text = "–≤—ã–∏–≥—Ä—ã—à" if type_tx == "win" else "—Å—Ç–∞–≤–∫–∞"
        text += f"{timestamp[:16]} | {symbol} {abs_amount} –º–æ–Ω–µ—Ç | {type_text}\n"
    
    await message.answer(text, parse_mode="Markdown")

async def main():
    """Main function to start the bot."""
    try:
        # Initialize database
        init_db()
        logger.info("Database initialized")
        
        # Start the bot
        logger.info("Starting bot polling...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error in main function: {str(e)}")

if __name__ == "__main__":
    asyncio.run(main())